options {
    MULTI=true;
    NODE_PREFIX="";
}

PARSER_BEGIN(FAOPS)

import java.io.FileReader;

import faops.*;
// código Java que invoca o parser
public class FAOPS {
    public static void main(String args[]) throws ParseException {
        // criação do objecto utilizando o constructor com argumento para
        FileReader fr = null;
        try {
            fr = new FileReader("test.faops");

        } catch (Throwable e) {
            System.out.println("File not found");
        }

        FAOPS parser = new FAOPS(fr);
        try {
            Start start = parser.Start();
            start.dump("");
            start.eval();
        } catch (Throwable e) {
            e.printStackTrace();
    		System.out.println("Rejected.");
    	}
    }
}
PARSER_END(FAOPS)

// símbolos que não devem ser considerados na análise
SKIP :
{
    " " | "\t" | "\r"
}

// definição dos tokens (símbolos terminais)
TOKEN :
{
    < FA : "FA" >
    | < FANAME : (["A"-"Z"])+ >
    | < QUOTES : ("\"") >
    | < FILENAME : ((["a"-"z"]|["A"-"Z"]|"-"|"_"|["0"-"9"]|".")+ ".dot") >
    | < MULTIPLY : "x" >
    | < CONCATENATE : "." >
    | < INTERSECTION : "int" >
    | < UNION : "+" >
    | < COMPLEMENT : "not(" >
    | < REVERSE : "rev(" >
    | < NEW : "new(" >
    | < DUMP : ".dump(" >
    | < ASSIGN : "=" >
    | < BEGINOPERATION : "(" >
    | < ENDOPERATION : ")" >
    | < ENDLINE : ";" >
    | < LF : "\n" | "\r" | "\r\n" >
}

Start Start() : {} //no bloco definido pelas primeiras chavetas declaram-se variáveis para a função
{
    (((<FA> FA() <ASSIGN> Stmt()) | Dump()) ((<ENDLINE>)? <LF>))+
    <EOF> {
        System.out.println("File Accepted");
        return jjtThis;
    }
}

void Stmt() : {}
{
    ((<NEW> <QUOTES> Path() <QUOTES> <ENDOPERATION>)
    | (Expr() (Op1() Expr())?)) {}
}

void FA() : {Token var;} {
    (var = <FANAME>) {
        jjtThis.name = var.image;
    }
}

void Path() : {Token path;}
{
    (path = <FILENAME>) {
        jjtThis.name = path.image;
    }
}

void Expr() : {}
{
    (Op2() Stmt() <ENDOPERATION>) |
    (<BEGINOPERATION> Stmt() <ENDOPERATION>) |
    (FA())
}

void Op1() : {Token op;}
{
    (op = <MULTIPLY>) {
        jjtThis.op = 0;
    }
    | (op = <CONCATENATE>) {
        jjtThis.op = 1;
    }
    | (op = <INTERSECTION>) {
        jjtThis.op = 2;
    }
    | (op = <UNION>) {
        jjtThis.op = 3;
    }
}

void Op2() : {Token op;}
{
    (op = <COMPLEMENT>) {
        jjtThis.op = 0;
    }
    | (op = <REVERSE>) {
        jjtThis.op = 1;
    }
}

void Dump() : {}
{
    FA() <DUMP> <QUOTES> Path() <QUOTES> <ENDOPERATION>
}
