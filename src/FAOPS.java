/* FAOPS.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. FAOPS.java */
import java.io.FileReader;

import faops.*;
// c√≥digo Java que invoca o parser
public class FAOPS/*@bgen(jjtree)*/implements FAOPSTreeConstants, FAOPSConstants {/*@bgen(jjtree)*/
  protected static JJTFAOPSState jjtree = new JJTFAOPSState();public static void main(String args[]) throws ParseException {
        if (args.length != 1) {
            System.out.println("It is required to specify the .faops file to interpret");
            System.exit(0);
        }
        FileReader fr = null;
        try {
            fr = new FileReader(args[0]);

        } catch (Throwable e) {
            System.out.println("File not found");
        }

        FAOPS parser = new FAOPS(fr);
        try {
            Start start = parser.Start();
            start.dump("");
            start.eval();
        } catch (UndeclaredVariable e) {
            System.out.println(e.getMessage());
            System.exit(0);
        } catch (Throwable e) {
            e.printStackTrace();
                System.out.println("Rejected.");
            System.exit(0);
        }
    }

  static final public Start Start() throws ParseException {/*@bgen(jjtree) Start */
  Start jjtn000 = new Start(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case FA:{
          jj_consume_token(FA);
          FA();
          jj_consume_token(ASSIGN);
          Stmt();
          break;
          }
        case FANAME:{
          Dump();
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ENDLINE:{
          jj_consume_token(ENDLINE);
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          ;
        }
        jj_consume_token(LF);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case FA:
        case FANAME:{
          ;
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          break label_1;
        }
      }
      jj_consume_token(0);
jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
System.out.println("File Accepted");
        {if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
}

  static final public void Stmt() throws ParseException {/*@bgen(jjtree) Stmt */
  Stmt jjtn000 = new Stmt(JJTSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NEW:{
        jj_consume_token(NEW);
        jj_consume_token(QUOTES);
        Path();
        jj_consume_token(QUOTES);
        jj_consume_token(ENDOPERATION);
        break;
        }
      case FANAME:
      case COMPLEMENT:
      case REVERSE:
      case BEGINOPERATION:{
        Expr();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MULTIPLY:
        case CONCATENATE:
        case INTERSECTION:
        case UNION:{
          Op1();
          Expr();
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          ;
        }
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;

    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  static final public void FA() throws ParseException {/*@bgen(jjtree) FA */
             FA jjtn000 = new FA(JJTFA);
             boolean jjtc000 = true;
             jjtree.openNodeScope(jjtn000);Token var;
    try {
      var = jj_consume_token(FANAME);
jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
jjtn000.name = var.image;
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  static final public void Path() throws ParseException {/*@bgen(jjtree) Path */
               Path jjtn000 = new Path(JJTPATH);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);Token path;
    try {
      path = jj_consume_token(FILENAME);
jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
jjtn000.name = path.image;
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  static final public void Expr() throws ParseException {/*@bgen(jjtree) Expr */
  Expr jjtn000 = new Expr(JJTEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMPLEMENT:
      case REVERSE:{
        Op2();
        Stmt();
        jj_consume_token(ENDOPERATION);
        break;
        }
      case BEGINOPERATION:{
        jj_consume_token(BEGINOPERATION);
        Stmt();
        jj_consume_token(ENDOPERATION);
        break;
        }
      case FANAME:{
        FA();
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  static final public void Op1() throws ParseException {/*@bgen(jjtree) Op1 */
              Op1 jjtn000 = new Op1(JJTOP1);
              boolean jjtc000 = true;
              jjtree.openNodeScope(jjtn000);Token op;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MULTIPLY:{
        op = jj_consume_token(MULTIPLY);
jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
jjtn000.op = 0;
        break;
        }
      case CONCATENATE:{
        op = jj_consume_token(CONCATENATE);
jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
jjtn000.op = 1;
        break;
        }
      case INTERSECTION:{
        op = jj_consume_token(INTERSECTION);
jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
jjtn000.op = 2;
        break;
        }
      case UNION:{
        op = jj_consume_token(UNION);
jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
jjtn000.op = 3;
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  static final public void Op2() throws ParseException {/*@bgen(jjtree) Op2 */
              Op2 jjtn000 = new Op2(JJTOP2);
              boolean jjtc000 = true;
              jjtree.openNodeScope(jjtn000);Token op;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMPLEMENT:{
        op = jj_consume_token(COMPLEMENT);
jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
jjtn000.op = 0;
        break;
        }
      case REVERSE:{
        op = jj_consume_token(REVERSE);
jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
jjtn000.op = 1;
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  static final public void Dump() throws ParseException {/*@bgen(jjtree) Dump */
  Dump jjtn000 = new Dump(JJTDUMP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      FA();
      jj_consume_token(DUMP);
      jj_consume_token(QUOTES);
      Path();
      jj_consume_token(QUOTES);
      jj_consume_token(ENDOPERATION);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public FAOPSTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[8];
  static private int[] jj_la1_0;
  static {
	   jj_la1_init_0();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x30,0x80000,0x30,0xf00,0x27020,0x23020,0xf00,0x3000,};
	}

  /** Constructor with InputStream. */
  public FAOPS(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public FAOPS(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new FAOPSTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public FAOPS(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new FAOPSTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new FAOPSTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public FAOPS(FAOPSTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(FAOPSTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[21];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 8; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 21; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private int trace_indent = 0;
  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
