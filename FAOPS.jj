/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. FAOPS.jj */
/*@egen*/    PARSER_BEGIN(FAOPS)

import java.io.FileReader;

import faops.*;

// c\u00f3digo Java que invoca o parser
public class FAOPS/*@bgen(jjtree)*/implements FAOPSTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTFAOPSState jjtree = new JJTFAOPSState();

/*@egen*/
    public static void main(String args[]) throws ParseException {
        // cria\u00e7\u00e3o do objecto utilizando o constructor com argumento para
        FileReader fr = null;
        try {
            fr = new FileReader("test.faops");

        } catch (Throwable e) {
            System.out.println("File not found");
        }

        FAOPS parser = new FAOPS(fr);
        try {
            while(true)
                parser.start();
        } catch (Throwable e) {
            e.printStackTrace();
    		System.out.println("Rejected.");
    	}
    }
}
PARSER_END(FAOPS)

// s\u00edmbolos que n\u00e3o devem ser considerados na an\u00e1lise
SKIP :
{
    " " | "\t" | "\r"
}

// defini\u00e7\u00e3o dos tokens (s\u00edmbolos terminais)
TOKEN :
{
    < FA : "FA" >
    | < FANAME : (["A"-"Z"])+ >
    | < QUOTES : ("\"") >
    | < FILENAME : ((["a"-"z"]|["A"-"Z"]|"-"|"_"|["0"-"9"]|".")+ ".dot") >
    | < MULTIPLY : "x" >
    | < CONCATENATE : "." >
    | < INTERSECTION : "int" >
    | < UNION : "+" >
    | < COMPLEMENT : "not(" >
    | < REVERSE : "rev(" >
    | < NEW : "new(" >
    | < DUMP : ".dump(" >
    | < ASSIGN : "=" >
    | < BEGINOPERATION : "(" >
    | < ENDOPERATION : ")" >
    | < ENDLINE : ";" >
    | < LF : "\n" | "\r" | "\r\n" >
}

void start() : {/*@bgen(jjtree) start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} //no bloco definido pelas primeiras chavetas declaram-se vari\u00e1veis para a fun\u00e7\u00e3o
{/*@bgen(jjtree) start */
    try {
/*@egen*/

    ((<FA> <FANAME> <ASSIGN> stmt())
    | dump()) ((<ENDLINE>)? <LF>)/*@bgen(jjtree)*/
                                  {
                                    jjtree.closeNodeScope(jjtn000, true);
                                    jjtc000 = false;
                                  }
/*@egen*/ {
        System.out.println("Line Accepted!");
    }
    | <EOF>/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
            }
/*@egen*/ {
        System.out.println("File Accepted");
        System.exit(0);
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void stmt() : {/*@bgen(jjtree) stmt */
               SimpleNode jjtn000 = new SimpleNode(JJTSTMT);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);
/*@egen*/Token path;}
{/*@bgen(jjtree) stmt */
    try {
/*@egen*/
    (<NEW> <QUOTES> (path = <FILENAME>) <QUOTES> <ENDOPERATION>)/*@bgen(jjtree)*/
                                                                 {
                                                                   jjtree.closeNodeScope(jjtn000, true);
                                                                   jjtc000 = false;
                                                                 }
/*@egen*/ {}
    | (expr() (op1() expr())?)/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
/*
    ParseDot parser = new ParseDot();
    parser.parseFile(path.image);
    DumpDot dump = new DumpDot(parser.getGraph());
    dump.dumpFile("exit" + path.image);

    //Reverse rev = new Reverse(parser.getGraph());
    //Complement comp = new Complement(parser.getGraph());
    //Complement comp2 = new Complement(comp.getGraph());
    ParseDot parser1 = new ParseDot();
    parser1.parseFile("B.dot");
    //Complement comp = new Complement(parser1.getGraph());
    //Complement comp2 = new Complement(comp.getGraph());
    //Reverse rev = new Reverse(parser1.getGraph());
    //Concatenate con = new Concatenate(parser.getGraph(), parser1.getGraph());
    Union un = new Union(parser.getGraph(), parser1.getGraph());
    }|
    */
}

void expr() : {/*@bgen(jjtree) expr */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) expr */
    try {
/*@egen*/
    (op2() stmt() <ENDOPERATION>) |
    (<BEGINOPERATION> stmt() <ENDOPERATION>) |
    (<FANAME>)/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void op1() : {/*@bgen(jjtree) op1 */
  SimpleNode jjtn000 = new SimpleNode(JJTOP1);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) op1 */
    try {
/*@egen*/
    (<MULTIPLY>) |
    (<CONCATENATE>) |
    (<INTERSECTION>) |
    (<UNION>)/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void op2() : {/*@bgen(jjtree) op2 */
  SimpleNode jjtn000 = new SimpleNode(JJTOP2);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) op2 */
    try {
/*@egen*/
    (<COMPLEMENT>) |
    (<REVERSE>)/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void dump() : {/*@bgen(jjtree) dump */
  SimpleNode jjtn000 = new SimpleNode(JJTDUMP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) dump */
    try {
/*@egen*/
    <FANAME> <DUMP> <QUOTES> <FILENAME> <QUOTES> <ENDOPERATION>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}