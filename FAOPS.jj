PARSER_BEGIN(FAOPS)
// código Java que invoca o parser
public class FAOPS {
    public static void main(String args[]) throws ParseException {
        // criação do objecto utilizando o constructor com argumento para
        // ler do standard input (teclado)
        FAOPS parser = new FAOPS(System.in);
        try {
            parser.start();
        } catch (Throwable e) {
    		System.out.println("Rejected.");
    	}
    }
}
PARSER_END(FAOPS)

// símbolos que não devem ser considerados na análise
SKIP :
{
    " " | "\t" | "\r"
}

// definição dos tokens (símbolos terminais)
TOKEN :
{
    < INTEGER : (["0"-"9"])+ >
    | < LF : "\n" >
    | < FA : "FA" >
    | < FANAME : (["A"-"Z"])+ >
    | < FILENAME : ("\"" (["a"-"z"] | ["A"-"Z"])+ ".dot\"") >
    | < OP1 : "x" | "." | "int" | "+" >
    | < OP2 : "not(" | "rev(" >
    | < NEW : "new(" >
    | < DUMP : ".dump(" >
    | < ASSIGN : "=" >
    | < BEGINOPERATION : "(" >
    | < ENDOPERATION : ")" >
}

void start() : {} //no bloco definido pelas primeiras chavetas declaram-se variáveis para a função
{
    ((<FA> <FANAME> <ASSIGN> stmt()) |
    dump()) {
        System.out.println("Accepted!");
    }
}

void stmt() : {}
{
    (<NEW> <FILENAME> <ENDOPERATION>) |
    (expr() (<OP1> expr())?)
}

void expr() : {}
{
    (<OP2> stmt() <ENDOPERATION>) |
    (<BEGINOPERATION> stmt() <ENDOPERATION>) |
    (<FANAME>)
}

void dump() : {}
{
    <FANAME> <DUMP> <FILENAME> <ENDOPERATION>
}
