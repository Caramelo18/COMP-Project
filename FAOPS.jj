/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. FAOPS.jj */
/*@egen*/options {
               
                   
}

PARSER_BEGIN(FAOPS)

import java.io.FileReader;

import faops.*;
// c\u00f3digo Java que invoca o parser
public class FAOPS/*@bgen(jjtree)*/implements FAOPSTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTFAOPSState jjtree = new JJTFAOPSState();

/*@egen*/
    public static void main(String args[]) throws ParseException {
        if (args.length != 1) {
            System.out.println("It is required to specify the .faops file to interpret");
            System.exit(0);
        }
        FileReader fr = null;
        try {
            fr = new FileReader(args[0]);

        } catch (Throwable e) {
            System.out.println("File not found");
        }

        FAOPS parser = new FAOPS(fr);
        try {
            Start start = parser.Start();
            start.dump("");
            start.eval();
        } catch (UndeclaredVariable e) {
            System.out.println(e.getMessage());
            System.exit(0);
        } catch (Throwable e) {
            e.printStackTrace();
    		System.out.println("Rejected.");
            System.exit(0);
    	}
    }
}
PARSER_END(FAOPS)

// s\u00edmbolos que n\u00e3o devem ser considerados na an\u00e1lise
SKIP :
{
    " " | "\t" | "\r"
}

// defini\u00e7\u00e3o dos tokens (s\u00edmbolos terminais)
TOKEN :
{
    < FA : "FA" >
    | < FANAME : (["A"-"Z"])+ >
    | < QUOTES : ("\"") >
    | < FILENAME : ((["a"-"z"]|["A"-"Z"]|"-"|"_"|["0"-"9"]|".")+ ".dot") >
    | < MULTIPLY : "x" >
    | < CONCATENATE : "." >
    | < INTERSECTION : "int" >
    | < UNION : "+" >
    | < COMPLEMENT : "not(" >
    | < REVERSE : "rev(" >
    | < NEW : "new(" >
    | < DUMP : ".dump(" >
    | < ASSIGN : "=" >
    | < BEGINOPERATION : "(" >
    | < ENDOPERATION : ")" >
    | < ENDLINE : ";" >
    | < LF : "\n" | "\r" | "\r\n" >
}

Start Start() : {/*@bgen(jjtree) Start */
  Start jjtn000 = new Start(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} //no bloco definido pelas primeiras chavetas declaram-se vari\u00e1veis para a fun\u00e7\u00e3o
{/*@bgen(jjtree) Start */
    try {
/*@egen*/
    (((<FA> FA() <ASSIGN> Stmt()) | Dump()) ((<ENDLINE>)? <LF>))+
    <EOF>/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/ {
        System.out.println("File Accepted");
        return jjtn000;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Stmt() : {/*@bgen(jjtree) Stmt */
  Stmt jjtn000 = new Stmt(JJTSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Stmt */
    try {
/*@egen*/
    ((<NEW> <QUOTES> Path() <QUOTES> <ENDOPERATION>)
    | (Expr() (Op1() Expr())?))/*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                }
/*@egen*/ {}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void FA() : {/*@bgen(jjtree) FA */
             FA jjtn000 = new FA(JJTFA);
             boolean jjtc000 = true;
             jjtree.openNodeScope(jjtn000);
/*@egen*/Token var;} {/*@bgen(jjtree) FA */
    try {
/*@egen*/
    (var = <FANAME>)/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/ {
        jjtn000.name = var.image;
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Path() : {/*@bgen(jjtree) Path */
               Path jjtn000 = new Path(JJTPATH);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);
/*@egen*/Token path;}
{/*@bgen(jjtree) Path */
    try {
/*@egen*/
    (path = <FILENAME>)/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ {
        jjtn000.name = path.image;
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Expr() : {/*@bgen(jjtree) Expr */
  Expr jjtn000 = new Expr(JJTEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Expr */
    try {
/*@egen*/
    (Op2() Stmt() <ENDOPERATION>) |
    (<BEGINOPERATION> Stmt() <ENDOPERATION>) |
    (FA())/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Op1() : {/*@bgen(jjtree) Op1 */
              Op1 jjtn000 = new Op1(JJTOP1);
              boolean jjtc000 = true;
              jjtree.openNodeScope(jjtn000);
/*@egen*/Token op;}
{/*@bgen(jjtree) Op1 */
    try {
/*@egen*/
    (op = <MULTIPLY>)/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/ {
        jjtn000.op = 0;
    }
    | (op = <CONCATENATE>)/*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                           }
/*@egen*/ {
        jjtn000.op = 1;
    }
    | (op = <INTERSECTION>)/*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                            }
/*@egen*/ {
        jjtn000.op = 2;
    }
    | (op = <UNION>)/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/ {
        jjtn000.op = 3;
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Op2() : {/*@bgen(jjtree) Op2 */
              Op2 jjtn000 = new Op2(JJTOP2);
              boolean jjtc000 = true;
              jjtree.openNodeScope(jjtn000);
/*@egen*/Token op;}
{/*@bgen(jjtree) Op2 */
    try {
/*@egen*/
    (op = <COMPLEMENT>)/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ {
        jjtn000.op = 0;
    }
    | (op = <REVERSE>)/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                       }
/*@egen*/ {
        jjtn000.op = 1;
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Dump() : {/*@bgen(jjtree) Dump */
  Dump jjtn000 = new Dump(JJTDUMP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Dump */
    try {
/*@egen*/
    FA() <DUMP> <QUOTES> Path() <QUOTES> <ENDOPERATION>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}